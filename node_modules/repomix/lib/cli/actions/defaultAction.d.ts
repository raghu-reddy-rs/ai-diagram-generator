import { type RepomixConfigCli, type RepomixConfigMerged } from '../../config/configSchema.js';
import { type PackResult } from '../../core/packager.js';
import { Spinner } from '../cliSpinner.js';
import type { CliOptions } from '../types.js';
export interface DefaultActionRunnerResult {
    packResult: PackResult;
    config: RepomixConfigMerged;
}
export declare const runDefaultAction: (directories: string[], cwd: string, cliOptions: CliOptions) => Promise<DefaultActionRunnerResult>;
/**
 * Handles stdin processing workflow for file paths input.
 */
export declare const handleStdinProcessing: (directories: string[], cwd: string, config: RepomixConfigMerged, spinner: Spinner) => Promise<DefaultActionRunnerResult>;
/**
 * Handles normal directory processing workflow.
 */
export declare const handleDirectoryProcessing: (directories: string[], cwd: string, config: RepomixConfigMerged, spinner: Spinner) => Promise<DefaultActionRunnerResult>;
/**
 * Builds CLI configuration from command-line options.
 *
 * Note: Due to Commander.js behavior with --no-* flags:
 * - When --no-* flags are used (e.g., --no-file-summary), the options explicitly become false
 * - When no flag is specified, Commander defaults to true (e.g., options.fileSummary === true)
 * - For --no-* flags, we only apply the setting when it's explicitly false to respect config file values
 * - This allows the config file to maintain control unless explicitly overridden by CLI
 */
export declare const buildCliConfig: (options: CliOptions) => RepomixConfigCli;
//# sourceMappingURL=defaultAction.d.ts.map