import * as fs from 'node:fs/promises';
import type { CliOptions } from '../types.js';
import { type DefaultActionRunnerResult } from './defaultAction.js';
export declare const runRemoteAction: (repoUrl: string, cliOptions: CliOptions, deps?: {
    isGitInstalled: (deps?: {
        execGitVersion: (deps?: {
            execFileAsync: typeof import("child_process").execFile.__promisify__;
        }) => Promise<string>;
    }) => Promise<boolean>;
    execGitShallowClone: (url: string, directory: string, remoteBranch?: string, deps?: {
        execFileAsync: typeof import("child_process").execFile.__promisify__;
    }) => Promise<void>;
    getRemoteRefs: (url: string, deps?: {
        execLsRemote: (url: string, deps?: {
            execFileAsync: typeof import("child_process").execFile.__promisify__;
        }) => Promise<string>;
    }) => Promise<string[]>;
    runDefaultAction: (directories: string[], cwd: string, cliOptions: CliOptions) => Promise<DefaultActionRunnerResult>;
    downloadGitHubArchive: (repoInfo: import("../../core/git/gitRemoteParse.js").GitHubRepoInfo, targetDirectory: string, options?: import("../../core/git/gitHubArchive.js").ArchiveDownloadOptions, onProgress?: import("../../core/git/gitHubArchive.js").ProgressCallback, deps?: {
        fetch: typeof fetch;
        fs: typeof fs;
        pipeline: typeof import("stream/promises").pipeline;
        Transform: typeof import("stream").Transform;
        createWriteStream: typeof import("fs").createWriteStream;
    }) => Promise<void>;
    isGitHubRepository: (remoteValue: string) => boolean;
    parseGitHubRepoInfo: (remoteValue: string) => import("../../core/git/gitRemoteParse.js").GitHubRepoInfo | null;
    isArchiveDownloadSupported: (_repoInfo: import("../../core/git/gitRemoteParse.js").GitHubRepoInfo) => boolean;
}) => Promise<DefaultActionRunnerResult>;
export declare const createTempDirectory: () => Promise<string>;
export declare const cloneRepository: (url: string, directory: string, remoteBranch?: string, deps?: {
    execGitShallowClone: (url: string, directory: string, remoteBranch?: string, deps?: {
        execFileAsync: typeof import("child_process").execFile.__promisify__;
    }) => Promise<void>;
}) => Promise<void>;
export declare const cleanupTempDirectory: (directory: string) => Promise<void>;
export declare const copyOutputToCurrentDirectory: (sourceDir: string, targetDir: string, outputFileName: string) => Promise<void>;
//# sourceMappingURL=remoteAction.d.ts.map