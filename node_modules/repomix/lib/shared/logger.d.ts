export declare const repomixLogLevels: {
    readonly SILENT: -1;
    readonly ERROR: 0;
    readonly WARN: 1;
    readonly INFO: 2;
    readonly DEBUG: 3;
};
export type RepomixLogLevel = (typeof repomixLogLevels)[keyof typeof repomixLogLevels];
declare class RepomixLogger {
    private level;
    constructor();
    init(): void;
    setLogLevel(level: RepomixLogLevel): void;
    getLogLevel(): RepomixLogLevel;
    error(...args: unknown[]): void;
    warn(...args: unknown[]): void;
    success(...args: unknown[]): void;
    info(...args: unknown[]): void;
    log(...args: unknown[]): void;
    note(...args: unknown[]): void;
    debug(...args: unknown[]): void;
    trace(...args: unknown[]): void;
    private formatArgs;
}
export declare const logger: RepomixLogger;
export declare const setLogLevel: (level: RepomixLogLevel) => void;
/**
 * Set logger log level from workerData if valid.
 * This is used in worker threads where configuration is passed via workerData.
 */
export declare const setLogLevelByWorkerData: () => void;
export {};
//# sourceMappingURL=logger.d.ts.map