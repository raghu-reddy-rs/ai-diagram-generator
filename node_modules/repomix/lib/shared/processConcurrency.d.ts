import { type Options, Tinypool } from 'tinypool';
export type WorkerRuntime = NonNullable<Options['runtime']>;
export interface WorkerOptions {
    numOfTasks: number;
    workerPath: string;
    runtime: WorkerRuntime;
}
export declare const getProcessConcurrency: () => number;
export declare const getWorkerThreadCount: (numOfTasks: number) => {
    minThreads: number;
    maxThreads: number;
};
export declare const createWorkerPool: (options: WorkerOptions) => Tinypool;
export declare const cleanupWorkerPool: (pool: Tinypool) => Promise<void>;
export interface TaskRunner<T, R> {
    run: (task: T) => Promise<R>;
    cleanup: () => Promise<void>;
}
export declare const initTaskRunner: <T, R>(options: WorkerOptions) => TaskRunner<T, R>;
//# sourceMappingURL=processConcurrency.d.ts.map