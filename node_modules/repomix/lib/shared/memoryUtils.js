/**
 * Memory utility functions for monitoring memory usage across the application
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { logger } from './logger.js';
/**
 * Convert bytes to MB with 2 decimal precision
 */
function bytesToMB(bytes) {
    return Math.round((bytes / 1024 / 1024) * 100) / 100;
}
/**
 * Get current memory usage statistics in MB
 */
export function getMemoryStats() {
    const usage = process.memoryUsage();
    const heapUsed = bytesToMB(usage.heapUsed);
    const heapTotal = bytesToMB(usage.heapTotal);
    const external = bytesToMB(usage.external);
    const rss = bytesToMB(usage.rss);
    const heapUsagePercent = Math.round((heapUsed / heapTotal) * 10000) / 100;
    return {
        heapUsed,
        heapTotal,
        external,
        rss,
        heapUsagePercent,
    };
}
/**
 * Log memory usage at trace level with a context message
 */
export function logMemoryUsage(context) {
    const stats = getMemoryStats();
    logger.trace(`Memory [${context}] | Heap: ${stats.heapUsed}/${stats.heapTotal}MB (${stats.heapUsagePercent}%) | RSS: ${stats.rss}MB | Ext: ${stats.external}MB`);
}
/**
 * Log memory usage difference between two points
 */
export function logMemoryDifference(context, before, after) {
    const heapDiff = after.heapUsed - before.heapUsed;
    const rssDiff = after.rss - before.rss;
    const externalDiff = after.external - before.external;
    const formatDiff = (diff) => `${diff >= 0 ? '+' : ''}${diff.toFixed(2)}`;
    logger.trace(`Memory [${context} - Delta] | Heap: ${formatDiff(heapDiff)}MB | RSS: ${formatDiff(rssDiff)}MB | Ext: ${formatDiff(externalDiff)}MB`);
}
/**
 * Execute a function and log memory usage before and after
 */
export function withMemoryLogging(context, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        const before = getMemoryStats();
        logMemoryUsage(`${context} - Before`);
        try {
            const result = yield fn();
            const after = getMemoryStats();
            logMemoryUsage(`${context} - After`);
            logMemoryDifference(context, before, after);
            return result;
        }
        catch (error) {
            const after = getMemoryStats();
            logMemoryUsage(`${context} - After (Error)`);
            logMemoryDifference(context, before, after);
            throw error;
        }
    });
}
//# sourceMappingURL=memoryUtils.js.map