var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { logger } from '../../shared/logger.js';
import { initTaskRunner } from '../../shared/processConcurrency.js';
/**
 * Calculate token count for git logs if included
 */
export const calculateGitLogMetrics = (config_1, gitLogResult_1, ...args_1) => __awaiter(void 0, [config_1, gitLogResult_1, ...args_1], void 0, function* (config, gitLogResult, deps = {
    initTaskRunner,
}) {
    var _a;
    // Return zero token count if git logs are disabled or no result
    if (!((_a = config.output.git) === null || _a === void 0 ? void 0 : _a.includeLogs) || !gitLogResult) {
        return {
            gitLogTokenCount: 0,
        };
    }
    // Return zero token count if no git log content
    if (!gitLogResult.logContent) {
        return {
            gitLogTokenCount: 0,
        };
    }
    const taskRunner = deps.initTaskRunner({
        numOfTasks: 1, // Single task for git log calculation
        workerPath: new URL('./workers/gitLogMetricsWorker.js', import.meta.url).href,
        runtime: 'child_process',
    });
    try {
        const startTime = process.hrtime.bigint();
        logger.trace('Starting git log token calculation using worker');
        const result = yield taskRunner.run({
            content: gitLogResult.logContent,
            encoding: config.tokenCount.encoding,
        });
        const endTime = process.hrtime.bigint();
        const duration = Number(endTime - startTime) / 1e6;
        logger.trace(`Git log token calculation completed in ${duration.toFixed(2)}ms`);
        return {
            gitLogTokenCount: result,
        };
    }
    catch (error) {
        logger.error('Failed to calculate git log metrics:', error);
        return {
            gitLogTokenCount: 0,
        };
    }
    finally {
        yield taskRunner.cleanup();
    }
});
//# sourceMappingURL=calculateGitLogMetrics.js.map