import type { RepomixConfigMerged } from '../../config/configSchema.js';
import type { RepomixProgressCallback } from '../../shared/types.js';
import type { ProcessedFile } from '../file/fileTypes.js';
import type { GitDiffResult } from '../git/gitDiffHandle.js';
import type { GitLogResult } from '../git/gitLogHandle.js';
export interface CalculateMetricsResult {
    totalFiles: number;
    totalCharacters: number;
    totalTokens: number;
    fileCharCounts: Record<string, number>;
    fileTokenCounts: Record<string, number>;
    gitDiffTokenCount: number;
    gitLogTokenCount: number;
}
export declare const calculateMetrics: (processedFiles: ProcessedFile[], output: string, progressCallback: RepomixProgressCallback, config: RepomixConfigMerged, gitDiffResult: GitDiffResult | undefined, gitLogResult: GitLogResult | undefined, deps?: {
    calculateSelectiveFileMetrics: (processedFiles: ProcessedFile[], targetFilePaths: string[], tokenCounterEncoding: import("tiktoken").TiktokenEncoding, progressCallback: RepomixProgressCallback, deps?: {
        initTaskRunner: <T, R>(options: import("../../shared/processConcurrency.js").WorkerOptions) => import("../../shared/processConcurrency.js").TaskRunner<T, R>;
    }) => Promise<import("./workers/types.js").FileMetrics[]>;
    calculateOutputMetrics: (content: string, encoding: import("tiktoken").TiktokenEncoding, path?: string, deps?: {
        initTaskRunner: <T, R>(options: import("../../shared/processConcurrency.js").WorkerOptions) => import("../../shared/processConcurrency.js").TaskRunner<T, R>;
    }) => Promise<number>;
    calculateGitDiffMetrics: (config: RepomixConfigMerged, gitDiffResult: GitDiffResult | undefined, deps?: {
        initTaskRunner: <T, R>(options: import("../../shared/processConcurrency.js").WorkerOptions) => import("../../shared/processConcurrency.js").TaskRunner<T, R>;
    }) => Promise<number>;
    calculateGitLogMetrics: (config: RepomixConfigMerged, gitLogResult: GitLogResult | undefined, deps?: {
        initTaskRunner: <T, R>(options: import("../../shared/processConcurrency.js").WorkerOptions) => import("../../shared/processConcurrency.js").TaskRunner<T, R>;
    }) => Promise<{
        gitLogTokenCount: number;
    }>;
}) => Promise<CalculateMetricsResult>;
//# sourceMappingURL=calculateMetrics.d.ts.map