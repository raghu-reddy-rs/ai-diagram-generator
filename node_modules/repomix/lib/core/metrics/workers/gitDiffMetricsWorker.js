var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { logger, setLogLevelByWorkerData } from '../../../shared/logger.js';
import { freeTokenCounters, getTokenCounter } from '../tokenCounterFactory.js';
// Initialize logger configuration from workerData at module load time
// This must be called before any logging operations in the worker
setLogLevelByWorkerData();
export default (_a) => __awaiter(void 0, [_a], void 0, function* ({ workTreeDiffContent, stagedDiffContent, encoding }) {
    const processStartAt = process.hrtime.bigint();
    const tokenCounter = getTokenCounter(encoding);
    const countPromises = [];
    if (workTreeDiffContent) {
        countPromises.push(Promise.resolve().then(() => tokenCounter.countTokens(workTreeDiffContent)));
    }
    if (stagedDiffContent) {
        countPromises.push(Promise.resolve().then(() => tokenCounter.countTokens(stagedDiffContent)));
    }
    const results = yield Promise.all(countPromises);
    const totalTokens = results.reduce((sum, count) => sum + count, 0);
    const processEndAt = process.hrtime.bigint();
    logger.trace(`Calculated git diff metrics. Tokens: ${totalTokens}. Took: ${(Number(processEndAt - processStartAt) / 1e6).toFixed(2)}ms`);
    return totalTokens;
});
// Export cleanup function for Tinypool teardown
export const onWorkerTermination = () => {
    freeTokenCounters();
};
//# sourceMappingURL=gitDiffMetricsWorker.js.map