import { execFile } from 'node:child_process';
export declare const execGitLogFilenames: (directory: string, maxCommits?: number, deps?: {
    execFileAsync: typeof execFile.__promisify__;
}) => Promise<string[]>;
export declare const execGitDiff: (directory: string, options?: string[], deps?: {
    execFileAsync: typeof execFile.__promisify__;
}) => Promise<string>;
export declare const execGitVersion: (deps?: {
    execFileAsync: typeof execFile.__promisify__;
}) => Promise<string>;
export declare const execGitRevParse: (directory: string, deps?: {
    execFileAsync: typeof execFile.__promisify__;
}) => Promise<string>;
export declare const execLsRemote: (url: string, deps?: {
    execFileAsync: typeof execFile.__promisify__;
}) => Promise<string>;
export declare const execGitShallowClone: (url: string, directory: string, remoteBranch?: string, deps?: {
    execFileAsync: typeof execFile.__promisify__;
}) => Promise<void>;
export declare const execGitLog: (directory: string, maxCommits: number, gitSeparator: string, deps?: {
    execFileAsync: typeof execFile.__promisify__;
}) => Promise<string>;
/**
 * Validates a Git URL for security and format
 * @throws {RepomixError} If the URL is invalid or contains potentially dangerous parameters
 */
export declare const validateGitUrl: (url: string) => void;
//# sourceMappingURL=gitCommand.d.ts.map