export const buildTokenCountTree = (filesWithTokens) => {
    const root = {};
    for (const file of filesWithTokens) {
        // The file.path is already relative to the root directory
        if (!file.path || typeof file.path !== 'string') {
            continue;
        }
        // Always use forward slash for consistency across platforms
        const parts = file.path.split('/');
        const fileName = parts.pop();
        if (!fileName)
            continue;
        // Navigate/create the directory structure
        let current = root;
        for (const part of parts) {
            if (!current[part]) {
                current[part] = {};
            }
            current = current[part];
        }
        // Add the file
        if (!current._files) {
            current._files = [];
        }
        current._files.push({
            name: fileName,
            tokens: file.tokens,
        });
    }
    // Calculate token sums for each directory
    calculateTokenSums(root);
    return root;
};
const calculateTokenSums = (node) => {
    let totalTokens = 0;
    // Add tokens from files in this directory
    if (node._files) {
        totalTokens += node._files.reduce((sum, file) => sum + file.tokens, 0);
    }
    // Add tokens from subdirectories
    for (const [key, value] of Object.entries(node)) {
        if (key.startsWith('_') || !value || typeof value !== 'object' || Array.isArray(value)) {
            continue;
        }
        totalTokens += calculateTokenSums(value);
    }
    node._tokenSum = totalTokens;
    return totalTokens;
};
//# sourceMappingURL=buildTokenCountStructure.js.map