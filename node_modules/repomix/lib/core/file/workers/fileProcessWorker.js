var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { setLogLevelByWorkerData } from '../../../shared/logger.js';
import { cleanupLanguageParser } from '../../treeSitter/parseFile.js';
import { processContent } from '../fileProcessContent.js';
// Initialize logger configuration from workerData at module load time
// This must be called before any logging operations in the worker
setLogLevelByWorkerData();
export default (_a) => __awaiter(void 0, [_a], void 0, function* ({ rawFile, config }) {
    const processedContent = yield processContent(rawFile, config);
    return {
        path: rawFile.path,
        content: processedContent,
    };
});
// Export cleanup function for Tinypool teardown
export const onWorkerTermination = () => __awaiter(void 0, void 0, void 0, function* () {
    yield cleanupLanguageParser();
});
//# sourceMappingURL=fileProcessWorker.js.map