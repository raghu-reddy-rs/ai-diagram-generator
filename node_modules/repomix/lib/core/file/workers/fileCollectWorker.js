var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import path from 'node:path';
import { setLogLevelByWorkerData } from '../../../shared/logger.js';
import { readRawFile } from '../fileRead.js';
// Initialize logger configuration from workerData at module load time
// This must be called before any logging operations in the worker
setLogLevelByWorkerData();
export default (_a) => __awaiter(void 0, [_a], void 0, function* ({ filePath, rootDir, maxFileSize }) {
    const fullPath = path.resolve(rootDir, filePath);
    const result = yield readRawFile(fullPath, maxFileSize);
    if (result.content !== null) {
        return {
            rawFile: {
                path: filePath,
                content: result.content,
            },
        };
    }
    if (result.skippedReason) {
        return {
            skippedFile: {
                path: filePath,
                reason: result.skippedReason,
            },
        };
    }
    throw new Error(`File processing for ${filePath} resulted in an unexpected state: content is null but no skip reason was provided.`);
});
// Export cleanup function for Tinypool teardown (no cleanup needed for this worker)
export const onWorkerTermination = () => {
    // No cleanup needed for file collection worker
};
//# sourceMappingURL=fileCollectWorker.js.map